{"version":3,"sources":["components/Player/index.tsx","components/Navbar/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Player","_ref","data","hlsUrl","setHlsUrl","useState","chid","setChid","playerRef","React","useRef","channel","myHeaders","Headers","append","raw","JSON","stringify","media","hevc","requestOptions","method","headers","body","redirect","fetch","then","response","json","result","href","chan","current","play","catch","error","console","log","getChan","createElement","ReactHlsPlayer","src","autoPlay","controls","width","height","id","chx","sort","a","b","number","Drawer","styled","MuiDrawer","shouldForwardProp","prop","theme","open","& .MuiDrawer-paper","position","whiteSpace","transition","transitions","create","easing","sharp","duration","enteringScreen","boxSizing","overflowX","leavingScreen","spacing","[object Object]","breakpoints","up","NavBar","mdTheme","createTheme","palette","mode","setOpen","chanData","setChan","title","digits","setDigits","visible","setVisible","timer","setTimeout","clearTimeout","index","findIndex","Number","parseInt","handleKeyDown","event","key","navChan","active","name","image","test","newDigits","length","chanx","find","join","document","addEventListener","removeEventListener","epgStr","sessionStorage","getItem","setItem","currentEpg","image_wide","start_time","end_time","epgData","parse","channelData","now","depg","GetCurrentEPG","ThemeProvider","Box","sx","display","variant","Toolbar","alignItems","justifyContent","px","IconButton","onClick","toggleDrawer","mr","ChevronLeftIcon","MenuIcon","List","component","overflowY","map","i","ListItemButton","ListItemIcon","concat","alt","style","ListItemText","primary","flexGrow","overflow","backgroundColor","Container","maxWidth","mt","Grid","container","Card","CardHeader","avatar","Avatar","aria-label","action","toggleFullScreen","el","getElementById","requestFullscreen","msRequestFullscreen","mozRequestFullScreen","webkitRequestFullscreen","FullScreenIcon","subheader","moment","unix","format","CardMedia","Fade","in","timeout","Fab","bottom","left","color","darkTheme","App","CssBaseline","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render"],"mappings":"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","file":"static/js/main.206e0c0f.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport ReactHlsPlayer from 'react-hls-player';\r\n\r\nexport default function Player({ data }: any) {\r\n  const [hlsUrl, setHlsUrl] = useState(\"https://shattereddisk.github.io/rickroll/rickroll.mp4\");\r\n  const [chid, setChid]= useState(\"\");\r\n  const playerRef: any = React.useRef();\r\n \r\n  getChan(data.chan);\r\n  function getChan(channel: string){\r\n    var myHeaders = new Headers();\r\n    myHeaders.append(\"Content-Type\", \"application/json\");\r\n    var raw = JSON.stringify({\r\n      \"media\": channel,\r\n      \"hevc\": 1\r\n    });\r\n    const requestOptions :any = {\r\n      method: 'POST',\r\n      headers: myHeaders,\r\n      body: raw,\r\n      redirect: 'follow'\r\n    };\r\n    if(chid !== channel){\r\n      fetch(\"https://alquinta.zappingtv.com/v13/androidtv/playcanal/try2minutes\", requestOptions)\r\n      .then(response => response.json())\r\n      .then(result => {\r\n        setHlsUrl(result.data.href);\r\n        setChid(data.chan);\r\n        playerRef.current.play();\r\n      })\r\n      .catch(error => console.log('error', error));\r\n    }\r\n    //setHlsUrl(\"https://shattereddisk.github.io/rickroll/rickroll.mp4\");\r\n    //setChid(data.chan);\r\n    //playerRef.current.play();\r\n  }\r\n\r\n  return (\r\n    <ReactHlsPlayer\r\n      src = {hlsUrl}\r\n      autoPlay={true}\r\n      controls={false}\r\n      playerRef={playerRef}\r\n      width=\"100%\"\r\n      height=\"auto\"\r\n      id=\"zapitoVideo\"\r\n    />\r\n  );\r\n}","import * as React from 'react';\r\nimport { styled, createTheme, ThemeProvider } from '@mui/material/styles';\r\nimport Box from '@mui/material/Box';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport MenuIcon from '@mui/icons-material/Menu';\r\nimport MuiDrawer from '@mui/material/Drawer';\r\nimport FullScreenIcon from '@mui/icons-material/Fullscreen';\r\nimport List from '@mui/material/List';\r\nimport ChevronLeftIcon from '@mui/icons-material/ChevronLeft';\r\nimport { Avatar, Card, CardHeader, CardMedia, Fab, Fade, Grid, ListItemButton, ListItemIcon, ListItemText } from '@mui/material';\r\nimport chan from '../../data/chan.json';\r\nimport depg from '../../data/default.json';\r\nimport { Container } from '@mui/system';\r\nimport Player from '../Player';\r\nimport { Channel, Programation } from '../../interfaces/epg';\r\nimport moment from 'moment';\r\nimport { chanData } from '../../interfaces/chanData';\r\n\r\nconst drawerWidth: number = 280;\r\nconst chx = chan.data.sort((a: any, b: any) => (a.number > b.number) ? 1 : -1);\r\nconst Drawer = styled(MuiDrawer, { shouldForwardProp: (prop) => prop !== 'open' })(\r\n  ({ theme, open }) => ({\r\n    '& .MuiDrawer-paper': {\r\n      position: 'relative',\r\n      whiteSpace: 'nowrap',\r\n      width: drawerWidth,\r\n      transition: theme.transitions.create('width', {\r\n        easing: theme.transitions.easing.sharp,\r\n        duration: theme.transitions.duration.enteringScreen,\r\n      }),\r\n      boxSizing: 'border-box',\r\n      ...(!open && {\r\n        overflowX: 'hidden',\r\n        transition: theme.transitions.create('width', {\r\n          easing: theme.transitions.easing.sharp,\r\n          duration: theme.transitions.duration.leavingScreen,\r\n        }),\r\n        width: theme.spacing(7),\r\n        [theme.breakpoints.up('sm')]: {\r\n          width: theme.spacing(9),\r\n        },\r\n      }),\r\n    },\r\n  }),\r\n);\r\nexport default function NavBar() {\r\n  const mdTheme = createTheme({\r\n    palette: {\r\n      mode: 'dark',\r\n    },\r\n  });\r\n  const [open, setOpen] = React.useState(true);\r\n  const toggleDrawer = () => {\r\n    setOpen(!open);\r\n  };\r\n\r\n  const [chanData, setChan] = React.useState(\r\n    {title:\"Zapito!\", number: \"1\"} as chanData\r\n  );\r\n  const [digits, setDigits] = React.useState<number[]>([]);\r\n  const [visible, setVisible] = React.useState(true);\r\n\r\n  React.useEffect(() => {\r\n    const timer = setTimeout(() => {\r\n      setVisible(false);\r\n    }, 2000);\r\n    return () => clearTimeout(timer);\r\n  }, []);\r\n\r\n  React.useEffect(() => {\r\n    let index = chx.findIndex(a=>a.number === Number.parseInt(chanData.number));\r\n    const handleKeyDown = (event: KeyboardEvent) => {\r\n      const key = event.key;\r\n      let navChan : any = {};\r\n      if(key === 'PageUp'){\r\n        navChan = chx[index+=1];\r\n        if(!navChan) index-=1;\r\n      }\r\n      if(key === 'PageDown'){\r\n        navChan = chx[index-=1];\r\n        if(!navChan) index+=1;\r\n      }\r\n      if(key === 'PageDown' || key === 'PageUp'){\r\n        if(navChan.active===1){\r\n          setChan({id:navChan.id, title: navChan.name, image: navChan.image, number: navChan.number});\r\n          setVisible(true);\r\n        }\r\n      }\r\n      if (/^\\d$/.test(key)) {\r\n        const newDigits = [...digits, parseInt(key, 10)];\r\n        if (newDigits.length <= 3) {\r\n          setDigits(newDigits);\r\n          if(newDigits.length>=2){\r\n            setVisible(true);\r\n            let chanx : any = chan.data.find(a=>a.number === Number.parseInt(newDigits.join('')) && a.active === 1);\r\n            setChan({id:chanx.id, title: chanx.name, image: chanx.image, number: chanx.number});\r\n            setDigits([]);\r\n          }\r\n        }\r\n      }\r\n    };\r\n    document.addEventListener('keydown', handleKeyDown);\r\nreturn () => {\r\n  document.removeEventListener('keydown', handleKeyDown);\r\n};\r\n}, [digits]);\r\n\r\n  let epgStr: string = sessionStorage.getItem(\"epg\") as string;\r\n  function getEpg() {\r\n    let requestOptions: any = {\r\n      method: 'POST',\r\n      redirect: 'follow'\r\n    };\r\n\r\n    fetch(\"https://charly.zappingtv.com/v2/androidtv/nowplaying\", requestOptions)\r\n      .then(response => response.json())\r\n      .then(result => { sessionStorage.setItem(\"epg\", JSON.stringify(result)); epgStr = JSON.stringify(result) })\r\n      .catch(error => console.log('error', error));\r\n  }\r\n\r\n  getEpg();\r\n  const currentEpg = GetCurrentEPG();\r\n  function GetCurrentEPG(): Programation {\r\n    const timer = setTimeout(() => {\r\n      setVisible(false);\r\n      clearTimeout(timer);\r\n    }, 3000);\r\n    \r\n    if (epgStr === null) {\r\n      return { title: \"Comienza seleccionando un canal\", image_wide: \"https://i.ytimg.com/vi/6-TXWeJRNyw/maxresdefault.jpg\", start_time: 0, end_time: 0 } as Programation;\r\n    }\r\n    let epgData: any = JSON.parse(epgStr);\r\n    if (epgData.data[chanData.image] && chanData.image) {\r\n      let channelData: Channel = epgData.data[chanData.image] as Channel;\r\n      if (channelData.now) {\r\n        channelData.now.image_wide = \"https://davinci.zappingtv.com/epg/\" + channelData.now.image_wide;\r\n        return channelData.now;\r\n      }\r\n      return depg as Programation;\r\n    }\r\n    return depg as Programation;\r\n  }\r\n\r\n  const toggleFullScreen = () => {\r\n    var el: any = document.getElementById(\"zapitoVideo\");\r\n    if (el.requestFullscreen) {\r\n      el.requestFullscreen();\r\n    } else if (el.msRequestFullscreen) {\r\n      el.msRequestFullscreen();\r\n    } else if (el.mozRequestFullScreen) {\r\n      el.mozRequestFullScreen();\r\n    } else if (el.webkitRequestFullscreen) {\r\n      el.webkitRequestFullscreen();\r\n    }\r\n  };\r\n  return (\r\n    <ThemeProvider theme={mdTheme}>\r\n      <Box sx={{ display: 'flex' }}>\r\n        <Drawer variant=\"permanent\" open={open}>\r\n          <Toolbar\r\n            sx={{\r\n              display: 'flex',\r\n              alignItems: 'center',\r\n              justifyContent: 'flex-end',\r\n              px: [1]\r\n            }}\r\n          >\r\n            <IconButton onClick={toggleDrawer} sx={{ mr: 1 }}>\r\n              {open ? <ChevronLeftIcon /> : <MenuIcon />}\r\n            </IconButton>\r\n          </Toolbar>\r\n          <List component=\"nav\" sx={{\r\n            overflowY: 'auto',\r\n            height: '92vh'\r\n          }}>\r\n            {chx.map((channel: any, i: any) => {\r\n              if (channel.active === 1) {\r\n                return <ListItemButton onClick={() => { setVisible(true); setDigits([]); setChan({id:channel.id, title: channel.name, image: channel.image, number: channel.number});}}>\r\n                  <ListItemIcon>\r\n                    <img src={`https://cdn-gato.zapping.live/media/500/canales/color/${channel.image}.jpg`} alt=\"No Img\" style={{ width: \"32px\", height: \"32px\" }}></img>\r\n                  </ListItemIcon><ListItemText primary={channel.name} />\r\n                </ListItemButton>\r\n              }\r\n              return null;\r\n            }\r\n            )}\r\n          </List>\r\n        </Drawer>\r\n        <Box component=\"main\"\r\n          sx={{\r\n            flexGrow: 1,\r\n            height: '100vh',\r\n            overflow: 'auto',\r\n            backgroundColor: 'transparent'\r\n          }}>\r\n          <Container maxWidth=\"xl\" sx={{ mt: 2 }}>\r\n            <Grid container spacing={0.5}>\r\n              <Card sx={{ width: '100vmax' }}>\r\n                <CardHeader\r\n                  avatar={\r\n                    <Avatar aria-label=\"recipe\">\r\n                      <img src={`https://cdn-gato.zapping.live/media/500/canales/color/${chanData.image}.jpg`} alt=\"No Img\" style={{ width: \"42px\", height: \"42px\" }}></img>\r\n                    </Avatar>\r\n                  }\r\n                  action={\r\n                    <IconButton aria-label=\"settings\" onClick={toggleFullScreen}>\r\n                      <FullScreenIcon />\r\n                    </IconButton>\r\n                  }\r\n                  title={chanData.title}\r\n                  subheader={currentEpg.title + \" desde las \" + moment.unix(currentEpg.start_time).format('hh:mm A') + \" hasta las \" + moment.unix(currentEpg.end_time).format('hh:mm A')}\r\n                />\r\n                <CardMedia>\r\n                  <Player data={{ chan: chanData.id }} />\r\n                  <Fade in={visible} timeout={2000}>\r\n                  <Fab sx={{\r\n  position: 'absolute',\r\n  bottom: '83vh',\r\n  left:(open?'95vw':'92vw'),\r\n}} aria-label='channel' color='primary'>\r\n                    {(digits.length>=2?digits.join(''):chanData.number)}\r\n                    \r\n                 </Fab>\r\n                 </Fade>\r\n                </CardMedia>\r\n              </Card>\r\n            </Grid>\r\n          </Container>\r\n        </Box>\r\n      </Box>\r\n    </ThemeProvider>\r\n  );\r\n}","import React  from 'react';\nimport './App.css';\nimport NavBar from './components/Navbar';\nimport { ThemeProvider, createTheme } from '@mui/material/styles';\nimport { CssBaseline } from '@mui/material';\n\n\nconst darkTheme = createTheme({\n  palette: {\n    mode: 'dark',\n  },\n});\n\n\n\n\n\nfunction App() {\n  return (\n    <ThemeProvider theme={darkTheme} >\n      <CssBaseline />\n    <NavBar/>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React  from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(\n  document.getElementById('root') as HTMLElement\n);\nroot.render(\n    <App />\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}